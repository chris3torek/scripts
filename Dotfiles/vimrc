filetype on
filetype plugin on
" set ai
set ic nows
set nomodeline
set ffs=unix " disable "file format = dos" detection
set backspace=indent,eol,start
set matchpairs+=<:>
" For now, use fmt.py for gq commands.  Everything can probably
" be done directly within vim using formatoptions...
set formatprg=fmt.py
inoremap # X#
syntax enable

autocmd BufNewFile,BufRead zones.*.conf	setf named

" this uses set filetype= because otherwise setf thinks we've
" already figured it out as a .login file
autocmd BufNewFile,BufRead $HOME/.login_conf	set filetype=ptcap

" mh Mail files
autocmd BufNewFile,BufRead $HOME/Mail/*/[[:digit:]]\+,/tmp/mail.*	set filetype=mail

" Unfortunately, listchars is global while list is local.
" But this works well enough if we just do global.
function! ToggleTabs()
    if &list
	set nolist listchars=eol:$
    else
	set list listchars=tab:>.,trail:>,precedes:<
    endif
endfunction

map <Leader>t :call ToggleTabs()<CR>
map <Leader><Leader> :nohlsearch<CR>

let g:netrw_browse_split = 1
let g:netrw_liststyle = 3

" pathogen: search for ~/.vim/bundle/* files...
execute pathogen#infect()

" not sure I want to use syntastic just yet
"" syntastic: recommended starter settings
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"" I prefer passive mode and :SyntasticCheck
"" let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_mode_map = {
"    \ "mode": "passive",
"    \ "active_filetypes": [],
"    \ "passive_filetypes": [] }

" gotags and tagbar
nmap <F8> :TagbarToggle<CR>
let g:tagbar_type_go = {
    \ 'ctagstype': 'go',
    \ 'kinds'    : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't': 'ctype',
        \ 'n': 'ntype'
    \ },
    \ 'ctagsbin' : 'gotags',
    \ 'ctagsargs': '-sort -silent'
\ }

" mark columns 81 and 141 (for go & python)
let &colorcolumn="81,141"
function! ToggleHLCols()
    let &colorcolumn = &colorcolumn == "" ? "81,141" : ""
endfunction
map <Leader>c :call ToggleHLCols()<CR>
